package com.ibaseit.pgp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.NoSuchProviderException;

import org.bouncycastle.openpgp.PGPException;

import com.ibaseit.utils.PgpHelper;

public class GsampgpParser {

	private String id = "95B6679D";
	private static String passwd = "<Yn#Jtt>vz6[8pD{";
	char p[] = passwd.toCharArray();

	public void encrypt(File plainTextFile) throws NoSuchProviderException, IOException, PGPException {

		ClassLoader classLoader = this.getClass().getClassLoader();
		File configFile = new File(classLoader.getResource("resources/PGP_Public.pgp").getFile());
		FileInputStream publicKey = new FileInputStream(configFile);
		FileOutputStream cipheredFile = new FileOutputStream(plainTextFile.getAbsolutePath() + ".pgp");
		// encryptFile(cipheredFile, plainTextFile,
		// PgpHelper.getInstance().readPublicKey(publicKey));
		PgpHelper.getInstance().encryptFile(cipheredFile, plainTextFile.getName(),
				PgpHelper.getInstance().readPublicKey(publicKey), false, true);
		// cipheredFile.close();
		
	}

	public void decrypt(File cipheredFile) throws Exception {

		ClassLoader classLoader = this.getClass().getClassLoader();
		File configFile1 = new File(classLoader.getResource("PGP_Private.pgp").getFile());
		FileInputStream privateKey = new FileInputStream(configFile1);
		FileInputStream encryptedFile = new FileInputStream(cipheredFile);
		FileOutputStream plainTextFile = new FileOutputStream(cipheredFile.getAbsolutePath() + ".txt");

		// encryptFile(cipheredFileIs, plainTextFile,
		// PgpHelper.getInstance().readPublicKey(pubKeyIs));
		PgpHelper.getInstance().decryptFile(encryptedFile, plainTextFile, privateKey, passwd.toCharArray());

		// plainTextFile.close();

	}

	public static void main(String[] args) throws Exception {
		GsampgpParser gsampgpParser = new GsampgpParser();
		System.out.println("My Encryption/Decryption route started");

		// File sampgpfile = new File(" ");

		if (args.length == 1) {

			File fileName = new File(args[0]);

			if (fileName.exists()) {
				if (fileName.isFile()) {
					System.out.println("it is a file");
					gsampgpParser.encrypt(fileName);

				} else if (fileName.isDirectory()) {
					File samdirectory = null;
					if (fileName.length() == 0) {
						System.out.println("The directory is empty");
					} else {
						File[] files = samdirectory.listFiles();
						for (File aFile : files) {
							gsampgpParser.encrypt(aFile);
						}
					}
				}
			}

		} else {
			System.out.println("Enter the valid file name/path...");
		}
	}
}